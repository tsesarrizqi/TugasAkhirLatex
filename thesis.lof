\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Contoh model Convolutional Neural Network (CNN). Pada model ini terdapat \textit {convolution layer}, \textit {pooling layer}, dan \textit {fully-connected layer}.\relax }}{4}{figure.caption.13}
\contentsline {figure}{\numberline {2.2}{\ignorespaces Perbedaan \textit {training} dan \textit {inference} pada \textit {Deep Learning}. \textit {Training} merupakan proses dua arah, sedangkan \textit {inference} hanya satu arah.\relax }}{5}{figure.caption.14}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Contoh operasi konvolusi. \textit {Convolved feature} adalah matriks keluaran dari konvolusi.\relax }}{7}{figure.caption.15}
\contentsline {figure}{\numberline {2.4}{\ignorespaces Perkalian matriks-vektor pada \textit {fully-connected layer}. Elemen ke-$i$ pada vektor \textit {weightxinput} adalah nilai $outi$.\relax }}{7}{figure.caption.16}
\contentsline {figure}{\numberline {2.5}{\ignorespaces Arsitektur Tensorflow Lite. \textit {Interpreter} bertugas menginterpretasikan model ".tflite" dan memuat \textit {kernels} yang diperlukan. \textit {Kernels} tersebut terpisah dari \textit {core} Tensorflow.\relax }}{9}{figure.caption.17}
\contentsline {figure}{\numberline {2.6}{\ignorespaces Contoh \textit {work-space} dua dimensi. \textit {Work-space} terbagi menjadi empat \textit {work-group} dua dimensi. Semua \textit {work-group} selalu memiliki ukuran yang sama.\relax }}{12}{figure.caption.19}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Modifikasi Tensorflow Lite \textit {kernel} dengan menambahkan satu jenis \textit {kernel} baru untuk operasi perkalian matriks-matriks dan konvolusi matriks yang diimplementasikan melalui OpenCL dan berjalan di GPU.\relax }}{15}{figure.caption.20}
\contentsline {figure}{\numberline {3.2}{\ignorespaces Metode persiapan untuk OpenCL yang dilakukan hanya satu kali di awal berjalannya suatu aplikasi \textit {Deep Learning}. Persiapan dilakukan ketika \textit {interpreter} melakukan inisiasi model.\relax }}{16}{figure.caption.22}
\contentsline {figure}{\numberline {3.3}{\ignorespaces Proses menyalin data masukan dan keluaran antara memori CPU dan GPU dilakukan pada setiap \textit {inference}. Proses menyalin data tidak dapat dilakukan satu kali saja karena data bersifat dinamis.\relax }}{16}{figure.caption.23}
\contentsline {figure}{\numberline {3.4}{\ignorespaces Struktur linear matriks masukan dan keluaran yang disimpan di memori GPU untuk operasi konvolusi. Elemen ke-15 dari data linear tersebut adalah elemen pada kanal ke-7, kolom ke-2, baris ke-1 dan \textit {batch} ke-1 dari matriks.\relax }}{16}{figure.caption.24}
\contentsline {figure}{\numberline {3.5}{\ignorespaces Struktur \textit {work-space} untuk konvolusi matriks. Dalam kasus ini $W_o$ adalah kelipatan 32 dan $H_o$ adalah kelipatan 8.\relax }}{17}{figure.caption.25}
\contentsline {figure}{\numberline {3.6}{\ignorespaces Blok pada matriks \textit {output} yang dikomputasi oleh suatu \textit {work-group}. Blok tersebut terdiri dari empat kanal. Blok berwarna abu-abu pada matriks \textit {output} merupakan hasil konvolusi dari blok abu-abu dari matriks \textit {image}.\relax }}{17}{figure.caption.26}
\contentsline {figure}{\numberline {3.7}{\ignorespaces Operasi konvolusi dilakukan dalam $ceil(C_i/4)$ iterasi dimana $C_i$ adalah kedalaman \textit {image}. Setiap iterasi melibatkan blok matriks \textit {image} dengan kedalaman 4, sesuai dengan panjang vektor $float4$.\relax }}{18}{figure.caption.27}
\contentsline {figure}{\numberline {3.8}{\ignorespaces \textit {Local memory cahing} terhadap matriks \textit {image} pada suatu iterasi dalam kasus \textit {filter} berukuran panjang dan lebar $3 \times 3$. \textit {Work-item} dengan nomor $i$ bertugas menyalin vektor-vektor $float4$ dari \textit {image} dengan nomor $i$ ke local memory.\relax }}{18}{figure.caption.28}
\contentsline {figure}{\numberline {3.9}{\ignorespaces Struktur linear matriks A, B, dan C pada operasi perkalian matriks-matriks. A dan C disimpan secara \textit {row-major}, sedangkan B secara \textit {column-major}.\relax }}{19}{figure.caption.29}
\contentsline {figure}{\numberline {3.10}{\ignorespaces Struktur \textit {work-space} untuk perkalian matriks-matriks. Dalam kasus ini tinggi \textit {work-space} adalah kelipatan 32 dan lebarnya adalah kelipatan 8.\relax }}{19}{figure.caption.30}
\contentsline {figure}{\numberline {3.11}{\ignorespaces Perkalian antara dua blok $32 \times K$ dan $K \times 32$ pada matriks A dan B sehingga menghasilkan satu blok $32 \times 32$ pada matriks C. Ukuran work-group dalam kasus ini adalah $32 \times 8$.\relax }}{20}{figure.caption.31}
\contentsline {figure}{\numberline {3.12}{\ignorespaces Operasi perklaian matriks-matriks yang dilakukan dalam $ceil(K/32)$ iterasi pada kasus ukuran work-group $32 \times 8$. Setiap iterasi melibatkan blok matriks A dengan lebar 32 dan blok matriks B dengan tinggi 32.\relax }}{20}{figure.caption.32}
\contentsline {figure}{\numberline {3.13}{\ignorespaces Pembagian kerja untuk menyalin blok matriks A dan B dari \textit {global memory} ke \textit {local memory} pada \textit {work-group} dengan ukuran $32 \times 8$. Masing-masing \textit {work-item} menyalin dua vektor $float4$. \textit {Work-item} merah memuat vektor berwarna merah dan \textit {work-item} biru memuat vektor berwarna biru.\relax }}{20}{figure.caption.33}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces Perbandingan kecepatan empat kernel pada operasi perkalian matriks-vektor tanpa memperhitungkan proses penyalinan data antara CPU dan GPU (ukuran 128x128 hingga 1024x1024).\relax }}{23}{figure.caption.36}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Perbandingan kecepatan empat kernel pada operasi perkalian matriks-vektor dengan memperhitungkan proses penyalinan data antara CPU dan GPU (ukuran 128x128 hingga 1024x1024).\relax }}{25}{figure.caption.40}
\contentsline {figure}{\numberline {4.3}{\ignorespaces Perbandingan kecepatan empat kernel pada operasi perkalian matriks-vektor dengan memperhitungkan proses penyalinan data antara CPU dan GPU (ukuran 128x128 hingga 1024x1024).\relax }}{27}{figure.caption.44}
\contentsline {figure}{\numberline {4.4}{\ignorespaces Perbandingan kecepatan empat kernel pada operasi perkalian matriks-vektor dengan memperhitungkan proses penyalinan data antara CPU dan GPU (ukuran 128x128 hingga 1024x1024).\relax }}{29}{figure.caption.48}
\addvspace {10\p@ }
